[
  {
    "fieldGroup": "LOAN",
    "messageType": "1",
    "condition": "input.monthlySalary >= 50000 && input.cibilScore >= 800 && input.requestedLoanAmount < 4000000 && $(bank.target_done) == false",
    "action": "output.setApprovalStatus(true);output.setSanctionedPercentage(90);output.setProcessingFees(8000);",
    "priority": 1,
    "description": "A person is eligible for Home loan?",
    "enrich": "output.setEligibility(transform.findFirstByCibilLessThanEqualAndMonthlySalaryLessThanEqualOrderByEligibleLoanAmountDesc(input.cibilScore,input.monthlySalary))"
  },
  {
    "fieldGroup": "LOAN",
    "messageType": "2",
    "condition": "input.monthlySalary >= 35000 && input.monthlySalary <= 50000 && input.cibilScore <= 500 && input.requestedLoanAmount < 2000000 && $(bank.target_done) == false",
    "action": "output.setApprovalStatus(true);output.setSanctionedPercentage(60);output.setProcessingFees(2000);",
    "priority": 2,
    "description": "A person is eligible for Home loan?",
    "enrich": null
  },
  {
    "fieldGroup": "LOAN",
    "messageType": "3",
    "condition": "(input.monthlySalary <= 4000 || input.cibilScore <= 100) && $(bank.target_done) == false",
    "action": "(input.requestedLoanAmount > 0) ? output.setApprovalStatus(true);output.setSanctionedPercentage(50);output.setProcessingFees(2100);output.setAccountNumber(input.getAccountNumber());output.setInterestRate(10.0f);output.setMessage(\"Cibil is not so good still granting\".toUpperCase()) : output.setMessage(\"INVALID CASE\")",
    "priority": 2,
    "description": "A person is eligible for Home loan?",
    "enrich": null
  },
  {
    "fieldGroup": "LOAN",
    "messageType": "4",
    "condition": "input.bank.equals(\"ABC BANK\") && input.age >= 30",
    "action": "(input.requestedLoanAmount > 0) ? output.setApprovalStatus(true);output.setSanctionedPercentage(50);output.setProcessingFees(2100);output.setAccountNumber(input.getAccountNumber());output.setInterestRate(10.0f);output.setMessage(\"Cibil is not so good still granting\".toUpperCase()) : output.setMessage(\"INVALID LOAN AMOUNT\")",
    "priority": 2,
    "description": "A person is eligible for Home loan?",
    "enrich": "output.setEligibility(refdata.findFirstByCibilLessThanEqualAndMonthlySalaryLessThanEqualOrderByEligibleLoanAmountDesc(input.getCibilScore(),input.getMonthlySalary()))"
  },
  {
    "fieldGroup": "INSURANCE",
    "messageType": "5",
    "condition": "input.premiumAmount >= $(insurance.premium_min_amt) && input.premiumTermInYear >= $(insurance.premium_min_year)",
    "enrich": "rule1",
    "action": "output.put(\"maturityAmount\",input.premiumAmount * 2);output.put(\"Testing StringUtils false\",org.springframework.util.StringUtils.hasText(\"\"));output.put(\"Testing StringUtils true\",org.springframework.util.StringUtils.hasText(\"Vegeta\"));output.put(\"example of map creation\",[\"Bob\" : new String(\"Bob\"), \"Michael\" : new String(\"Michael\")]);",
    "priority": 2,
    "description": "A person is eligible for insurance premium"
  },
  {
    "rulename": "rule1",
    "fieldGroup": "LOAN",
    "messageType": "6",
    "enrich": "refdataLib.invoke(\"output.setEligibility(refdata.findFirstByCibil(input.cibilScore))\",[\"input\" : input, \"output\": output]);\r\nisEligible = def (resp) { resp == null ? false : true };\r\noutput.setMetadata([\"isEligible\" : isEligible(output.eligibility)]);"
  }
]

,
[
{
"ruleNamespace": "LOAN",
"rule": "rule-1",
"action": "output.setApprovalStatus(true);output.setSanctionedPercentage(90);output.setProcessingFees(8000);output.setAccountNumber(input.accountNumber);output.setInterestRate($(bank.interest));output.setMessage(\"Rule # 1 Action performed\");",
"priority": 2,
"description": "A person is eligible for Home loan?",
"refRuleId": "rule-2"
},
{
"ruleNamespace": "DEFAULT",
"rule": "rule-2",
"condition": "input.age >= 30",
"action": "refdataLib.invoke(\"output.setEligibility(refdata.findFirstByCibil(input.cibilScore))\",[\"input\" : input, \"output\": output]);isEligible = def (resp) { resp == null ? false : true };output.setMetadata([\"isEligible\" : isEligible(output.eligibility)]);",
"priority": 2,
"description": "A person is eligible for Home loan?",
"refRuleId": "rule-5"
},
{
"ruleNamespace": "LOAN",
"rule": "rule-3",
"action": "output.setApprovalStatus(true);output.setSanctionedPercentage(50);output.setProcessingFees(2000);output.setAccountNumber(input.accountNumber);output.setInterestRate($(bank.interest));output.setMessage(\"rule # 3 action performed\");",
"priority": 2,
"description": "A person is eligible for Home loan?",
"refRuleId": "rule-4"
},
{
"ruleNamespace": "DEFAULT",
"rule": "rule-4",
"condition": "input.bank.equals(\"ABC BANK\") && input.requestedLoanAmount >= 10000",
"action": "refdataLib.invoke(\"output.setEligibility(refdata.findFirstByCibil(input.cibilScore))\",[\"input\" : input, \"output\": output]);isEligible = def (resp) { resp == null ? false : true };output.setMetadata([\"isEligible\" : isEligible(output.eligibility)]);",
"priority": 2,
"description": "A person is eligible for Home loan?"
},
{
"ruleNamespace": "DEFAULT",
"rule": "rule-5",
"condition": "input.bank.equals(\"XYZ BANK\")",
"action": "output.setMetadata([\"rule5 action\" : \"some extra action of rule 5\"]);",
"priority": 1,
"description": "Rule 5 description"
}
]


//condition - stage 1
//"input.bank.equals(\"XYZ BANK\") && input.age >= 30"

//action - stage 2
//"output.setApprovalStatus(true);
//output.setSanctionedPercentage(90);
//output.setProcessingFees(8000);
//output.setAccountNumber(input.accountNumber);
//output.setInterestRate($(bank.interest));
//output.setMessage(\"vip customer\");"

//enrichment - stage 3
//"refdataLib.invoke(
//"output.setEligibility(refdata.findFirstByCibil(input.cibilScore))",
//["input" : input, "output": output]);
//isEligible = def (resp) {
//resp == null ? false : true
//};
//output.setMetadata(["isEligible" : isEligible(output.eligibility)
//]
//);"